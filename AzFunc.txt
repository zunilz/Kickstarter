Azure Function
  Run code on demand
  No management of underlying infrastructure

Triggers
  -Only one Trigger
  -have associated data which are provided as arguments

Bindings
  -can have zero bindings
  -Declarative way of connecting services/resources with az functions

Pricing Plans
  -Consumption
    -5 mins limit of execution 
    -Has free quota
    -Auto scaling
  -Premium
    -At least one warm instance to avoid cold start
    -VNet connectivity
    -Always pay for pre warmed instnce
  -App Service
    -Runs on dedicated VMs
    -Reserved onstances
    -Billing as per App service plan
    -Manual scaling

Docker Runtime
  -If we don't want to run az func in azure managed function instance we
    can use docker conntainers    

When to use?
  -good for rapid prototyping
  -can use part of monolithic apps to have scalability : use functions here
  -integrate different systems

When to not use?
  -not fit for long running processes

Function app
  -group of function
  -language is selcted here and not in each function

Functions
  -Authorization level
    -Anonymous
    -Function
      -Function key - specific to function
      -Host key - works for all functions within function app
    -Admin
      -needs special master host key which provides admin aceess to 'all'
      -can not be revoked, but can be renewed
functions
  -Route template
   -allows us to define function and to add query params if needed
  -functions.json
    -defines bindings and trigger
  -context
    -used to pass data to and from function
    -has log object
    -has trigger object
    -has binding details
  -Function invocation history
    -in Monitor
    -need to enable app insights
  -Function's Storage Account
    -used to store function code and runtime
    -use to store logs as well

host.json
  -metadata file contains global config for all functions within function app
local.settings.json
  -for local dev configs

Monitoring
  -has Invocation and Log sections
  -Need app insights enabled to see these options
  -Alerts
    -have custom alert based on condition
  -Diagnostics settings
    -collect logs/metrics and send it to destination like log analytics, storage account, stream to eventhub
  -Log stream
    -live logs used for development

Securing Azure Functions
  -Can use App Service Authentication
    -MS, google, Twitter, Facebook, anonymous
    -All or none Auth option where all functions need above Auth if configured
    -Not good for SPA
  -using APIM
    -can use AD B2C

Function proxies
  -basic routing
  -request transormation
  -additional trace and debugging info
  -good for small apps

Durable functions
  -Fan in fan out
    -final function aggregates all function results
  -Async Http API
    -used for long running functions
    -one api used to get real time status


Azure Durable Functions (Continued... from PS course)
  Eternal Orchestrations
    Runs forever
    To avoid huge history of event sourcing, we could use ContinueAsNew to restart the orchestration from the begining
    Each time starter function is called to re execute O.F.
    Same OrchestrationId is used in each starter function invoke of O.F.
    To Exit Eternal Orchestration
      Don't call ContinueAsNew
      Unhandled exception
      Use Termination API

  Running in Production
    Deploy
      Need App service plan, Function app, storage account, app insights, DB
      Manual deploy or pipelines
    Secure
      Authorization key for HTTP triggered starter
      Anonymous
      Function
      Function key - specific to function
    Monitor
      Invocation history, log output
      Application Insights
        Create an instance of Application Inights
        Get the Instrumentation key
        add APPINSIGHTS_INSTRUMENTATIONKEY in appSettings of function app to connect to app insights 
    Upgrade functions
      Changes in existing O.F.'s workflow
      Stop Orchestrations
      Create new versions - side by side deployments
      


      
    









